Exult Studio Documentation
last changed: 07 April 2002(GMT)

The latest version of this document can be found at http://exult.sourceforge.net/studio.php


0. Changes to the Documentation
0.1. 07 April 2002

1. Introduction
1.1. What is Exult Studio?
1.2. Terms we use in regard to Exult and Ultima 7

2. Configurations
2.1. Installation
2.2. Running Exult Studio
2.3. Settings in exult.cfg.
2.4. Command line options

3. Editing a Game
3.1. Description
3.2. What you can do at the moment
3.3. The shape editor
3.4. Custom Usecode

4. Miscellaneous
4.1. Other tools that might be usefull
4.2. Porting Exult Studio to other platforms
4.3. About this client/server stuff?
4.4. About this 'terrain-editing' stuff and why you can't just drag objects to where you want.
4.5. What's next?

5. Credits
5.1. Thanks


--------------------------------------------------------------------------------

0. Changes to the Documentation
0.1. 07 April 2002
This is the first draft of the Exult Studio documentation. So please bear with me. It is by no means perfect and I ask you to send me all your comments on how to better express some stuff or to point out what I just plain forgot. Dominus



--------------------------------------------------------------------------------

1. Introduction
1.1. What is Exult Studio?
Exult is not only capable of playing Ultima 7 but it is also intended as an engine in the style of the one used by Ultima 7. Exult Studio started it's life as a simple map editor but it is slowly developing into a full fledged editor enabling users to create a new game. Tristan came up with the cool name!
Currently there are many steps required to create a new game but at the moment the main goal of Jeff is to make it as user-friendly as possible.
Editing a copyrighted game may or may not be allowed. Please exercise caution especially if you want to distribute your changes.


1.2. Terms we use in regard to Exult and Ultima 7
Along with the terms explained in ReadMe.txt there are some more terms that need to be explained for the usage of Exult Studio
* tile: 8x8 pixels
* chunk: 16x16 tiles
* superchunk: 16x16 chunks
* world: 12x12 superchunks




--------------------------------------------------------------------------------

2. Configurations
2.1. Installation
* You need Exult and you need to install it properly (see ReadMe.txt
* For U*ix platforms you need to build Exult Studio from the source avillable from our source snapshot at http://exult.sourceforge.net/download.php. You will also need the GTK+ library installed as well as libglade.
* For Win32 platforms (Win9x,ME,2k,XP) you need to download http://exult.sourceforge.net/snapshots/ExultStudio.exe and install it in the same directory where you installed Exult.



2.2. Running Exult Studio
You can run Exult Studio all by itself, but it isn't useful that way, as it uses Exult as a server. What you really want to do is:
* Put 'exult_studio.glade' in the Exult 'data' directory.
* Be sure 'exult_studio' is in your path. (on Win32 'exult_studio.exe' needs to be in the same directory as exult.exe)
* On U*ix platforms you need to be running Exult on X.
* Run Exult in windowed mode (not fullscreen).
* Press 'alt-ctrl-m' to go into 'map-editor' mode. If all is set up correctly, exult_studio will start up, and will have a list of files on the left side of its window (you need to have cheats enabled in Exult, see the ReadMe.txt).

Starting up one or the other separately will reconnect them:
* If Exult isn't running, start it up. Then, in Exult Studio, use the 'File' menu to choose the static directory (for the game you're playing).
* If Exult Studio isn't running start it up with: exult_studio -x (path to dir containing exult_studio.glade) -d (path to game directory)

You can also reconnect by selecting File-Connect in Exult Studio's menus.


2.3. Settings in exult.cfg.
You can change the settings of Exult Studio either with the prefernces dialog or via exult.cfg. Those settings are:
<config>
<estudio>
<main>
<width>
640
						** width of the program window 
						
</width>
<height>
400
						** height of the program window
						
</height>
</main>
<default_game>
gamename
						** default game to edit (games must be specified in 
						<game> part of exult.cfg)
						
</default_game>
<image_editor>
gimp-remote -n
						** command that calls the image editor. Only usefull on U*ix 
						platforms for now.
						
</image_editor>
<background_color>
0
						** background color for the shape-chooser. Use the preference 
						dialog of Exult Studio for this.
						
</background_color>
</estudio>
</config>


2.4. Command line options
Exult Studio offers some "hidden" command line options:
* -g GAMENAME specifies GAMENAME and Exult Studio will read the game base directory from exult.cfg. GAMENAME can be choosen from the games specified in <game> part of exult.cfg.
* -d DIRECTORY specifies DIRECTORY as the game base directory.
* -x DIRECTORY tells exult_studio to look in DIRECTORY for its user-interface specification (exult_studio.glade). This option is only useful to developers who want to edit exult_studio.glade themselves.




--------------------------------------------------------------------------------

3. Editing a Game
3.1. Description
Once Exult Studio runs correctly , a tree of game files is displayed to the left of the main window, while the currently selected file is viewed in detail to the right. At the moment, the following types of files are supported:
* Shape files Shapes are the basic graphical elements of the game. Each shape has one or more frames that typically represent different states or angles of the same thing. E.g. a button shape could have frames for pressed, and released; a character could have frames depicting her sitting, standing up facing one way, or another, swinging a punch, etc. When a shape file is selected, the right part of the main window will show frame zero of the shapes contained therein. Shapes can be selected by clicking, which will show there number, number of frames, and name if known. Other frames can be viewed by changing the frame number.
* Map files These files contain so called chunks that serve as templates in the final map. The chunks of the selected map file are shown to the right of the main window.



3.2. What you can do at the moment
With the latest source you can
* browse shapes in the main window.
* drag a shape from the shape browser to Exult, and that object will be placed in the game.
* edit an 'egg' by double-clicking on it. An edit box should appear.
* create a new 'egg' using the pull-down menu in Exult Studio. In the Egg edit box, after you hit 'Apply', you'll be prompted to click in Exult where you want the egg to appear.
* If editing a 'monster' egg, you can set the monster by dragging the shape from the browser to the area that displays the monster.
* edit an NPC by double-clicking on it, and also create a new NPC using the pull-down menu. Attributes, flags, and schedules can all be viewed and modified.
* can edit other objects' position and quality by double-clicking on them.
* browse the 'u7chunks' file, and drag them into Exult to change the terrain. In this browser, you can also create new terrains and modify their order.
* edit a 'terrain' (stored in 'u7chunks') by clicking the "Edit terrain" checkbox in Exult Studio. This is a special mode where dragging with the left mouse button 'paints' the currently-selected shape (generally one of the flat tiles near the top of the shapes browser). Note that a 'terrain' is generally used in multiple places in the map.
* save the map using ExultStudio's "File-Save map" pulldown. In order to avoid writing over files inadvertantly, the files that would normally go into the 'static' directory, will, instead, go into a 'patch' directory that you specify in your 'exult.cfg' file. Here's an example for editing BG:

<game>
<blackgate>
<path>
blackgate
</path>
<patch>
blackgate/patch
</patch>
<title>
blackgate
</title>
.
</blackgate>
Exult will also read files from 'patch' if it exists on starting a new game.


3.3. The shape editor
When you right click on a shape in the Shape browser (e.g. Files-Shapes.vga) you get some options of how to edit the shapes.
* Edit...: Brings up your image-editor on the chosen frame. When you save in the image-editor, ES will read the changes back within 5 seconds. This is especially convenient if you have 'gimp-remote', as it will open a window for the frame in an already-running gimp.
* Edit tiled: This is only for 'flat' (8x8) shapes. It forms an image from all the frames and brings it up in the image-editor. This is really handy for making lots of terrain frames like grass. A dialog lets you choose the dimensions.
* New frame: Creates a new frame after the currently-selected one. The 'insert' key also does this (and the 'del' key deletes a frame, though it's buggy if there's just one frame left).
* New shape: Gives you a dialog for choosing the shape #, as well as the initial # of frames.
* Import/Export frame: Let's you import a single frame from a .png file or export to a .png.

Note:Edit... doesn't work on Windows system. It stores the sahpe as PNG file in GAMEDIR/itmp/ (e.g. blackgate/itmp). If you manually open the file with an image editor of your liking and then save it, ES doesn't read the changes back.


3.4. Custom Usecode
As hinted at (see ReadMe.txt) Usecode is actually what runs Ultima 7 and therefore any game created with Exult Studio. As of yet we do not have a Usecode editor/debugger. So writing your own Usecode is not that easy.
For an example of how Usecode may look like download our experimental patch for BG at http://prdownloads.sourceforge.net/exult/bgpatch3.zip. In that zip you'll find a readme.txt which tells you how to run it. You will also see two files called usecode.uc and usecode.
Usecode is the usecode script that will help you understand our usecode language. When you run ucc (see 4.1. with that file (e.g. "ucc usecode.uc" you will get a file called usecode.uco. Rename usecode.uco to usecode and you will have the actual usecode that can be run with exult.



--------------------------------------------------------------------------------

4. Miscellaneous
4.1. Other tools that might be usefull
In the process of creating Exult the team came up with some usefull tools that might help in editing/making a game. These can be built from the Exult source or you can download the Windows binary snapshot. The source and binary snapshot can be found at http://exult.sourceforge.net/download.php. The tools are:
* expack: lets you extract and create Flex files. See manual.
* ipack: a tool for creating and updating Exult and U7 image archives, such as 'shapes.vga'. See manual.
* shp2pcx: converts all frames contained in a Shape file into PCX-format image files. See manual.
* splitshp: can be used to combine frames of a Shape file into one file, or split a Shape file into its component frames. See manual.
* textpack: can be used edit text flex files. See manual.
* ucc: can be used to create custom usecode (see 3.4..
* The GIMP Plug-in: can be used for editing shapes in the GIMP. Handles multiframe Shape files. See http://www.gimp.org for inormation on the GIMP.
* Photoshop Plug-in: can be used for editing shapes in Photoshop. Can't handle multiframe Shape files. And also can't handle indexed images with Alpha correctly.



4.2. Porting Exult Studio to other platforms
Currently Exult Studio runs on U*ix and Windows platforms. First it only ran on U*ix but with some effort by Colourless, Kirben and Mark Siewert it was succesfully ported to Win32.
A port to other platforms depends on when someone volunteers to do the work :-) There are three issues:
* GTK has to be ported to the platform.
* Exult Studio uses sockets to communicate with Exult.
* X drag-n-drop is used to put new objects on the landscape. The 'drop' part of this had to be rewritten for Win32 Exult, OR, drag-n-drop could be an enhancement to SDL someday. As an alternative to dragging objects, you can now select a shape, then insert it into the game window by left-clicking while holding the Shift key down.



4.3. About this client/server stuff?
A map-editor needs to provide the ability to display the game, place objects on the map, and move objects around. That functionality is already in Exult, and it makes sense to reuse it. So we could have made Exult a part of Exult Studio. However, Exult is already a huge program, and is getting unwieldy to work on.
With this architecture, Exult Studio can have all the messy code for displaying/editing dialog boxes, while Exult only needs a little bit of work to handle requests.
Also, I (Jeff) wanted to get a little experience programming with sockets:-)


4.4. About this 'terrain-editing' stuff and why you can't just drag objects to where you want.
This confused me too, and I originally planned on doing away with it. But do a little arithmetic: U7's world has 3072x3072 tiles; that's over 9 million that need to be set. My guess is that they came up with the idea behind 'u7chunks' to save artists time and to give the map a consistent look.
The basic idea is that each 'chunk' of flat terrain, 16x16 tiles, is stored in 'u7chunks', and is indexed by its position in this file (0, 1, 2, .... The 'u7map' file specifies, for each 'chunk' in the U7 map, which of the terrains is to be used. Since the entire map has 192x192 chunks, or a total of 36,864, and since 'u7chunks' has 3072 entries, each terrain is shared an average of over 10 times. When you go into map-editing mode in Exult, the numbers displayed are the indices from 'u7chunks'.
So here are the three sorts of scenery that you can see and edit:
1. The 'terrain' (flat landscape, rocks, shrubs, and first-story buildings) specified in 'u7chunks' and 'u7map'.
2. Other non-moveable objects (second-floor structures, trees) specified in the 'ifixnn' files.
3. Moveable and changeable objects specified in the 'iregnn' files.

The challenge of writing a map-editor is keeping the above straight, and reading/storing from/to the correct files. It's sorta-kinda working now :-)
For a more detailed explanation, see Gary Thompson's paper, 'u7edit.txt' in our 'docs' directory.


4.5. What's next?
The next things to be implemented are:
* The main menu needs a 'Save' that saves all the various files. Right now, saving is an inconsistent mess.
* Exult Studioneeds to be able to automatically create palettes 1-n from palette 0 using the code from ipack.
* A way to to create an entirely new game. This is a fairly big issue, since it involves having Exult run when many of its files don't yet exist (this is currently in progress).
* It will also be very nice to have a Usecode debugger someday as well (Willem is actually working on it).
* A 'flags' editor for viewing and editing the global Usecode flags by name.
* A 'barge' editor for creating things like ships and carts.




--------------------------------------------------------------------------------

5. Credits
5.1. Thanks
* Colourless, Kirben and Mark Siewart invested a lot of effort to port Exult Studio to Win32.



