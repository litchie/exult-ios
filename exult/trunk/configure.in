dnl Process this file with autoconf to produce a configure script.
AC_INIT(exult.cc)

PACKAGE=exult
MAJOR=0
RELNUM=99.0
VERSION=$MAJOR.$RELNUM

AM_INIT_AUTOMAKE($PACKAGE,$VERSION,no-define)
AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")

AM_CONFIG_HEADER(autoconfig.h)

dnl AC_DEFUN(MY_PROG_LIBTOOL,
dnl [
dnl if test -z "$LIBTOOL"; then
dnl  dnl libtool is only for C, so I must force him
dnl  dnl to find the correct flags for C++
dnl  CC=$CXX
dnl  CFLAGS="$CXXFLAGS"
dnl  AC_LANG_SAVE
dnl  AC_LANG_C
dnl  AC_REQUIRE([AM_PROG_LIBTOOL]) 
dnl  dnlAC_REQUIRE([AC_PROG_LIBTOOL]) dnl for libraries
dnl  LIBTOOL="$LIBTOOL --silent"
dnl  dnl AC_SUBST(LIBTOOL)
dnl  AC_LANG_RESTORE
dnl fi
dnl ]) 

AC_DEFUN(AC_CHECK_BOOL,
[
        AC_MSG_CHECKING([for bool])
        AC_CACHE_VAL(ac_cv_have_bool,
        [
                AC_LANG_CPLUSPLUS
                AC_TRY_COMPILE([],
                 [bool aBool = true;],
                 [ac_cv_have_bool="yes"],
                 [ac_cv_have_bool="no"])
        ]) dnl end AC_CHECK_VAL
        AC_MSG_RESULT($ac_cv_have_bool)
        if test "$ac_cv_have_bool" = "yes"; then
                AC_DEFINE(HAVE_BOOL, 1, [Define if the C++ compiler supports BOOL])
        fi
])

dnl Checks for programs.
AC_PROG_CC
AC_REQUIRE([AC_PROG_CPP])
AC_PROG_CPP
AC_PROG_INSTALL
AM_PROG_LEX
AC_PROG_YACC
AM_CONDITIONAL(LEXYACC, test -n "$YACC")


echo "Wondering what our windowing system is... "

dnl this is for win32 for now at least
AC_ARG_ENABLE(win32, [  --enable-win32          force exult build for windows [default no]],,enable_win32=no)

dnl And kmid
AC_ARG_ENABLE(kmid, [  --disable-kmid          force exult not to use kmid [default no]],,disable_kmid=no)

if test x$enable_win32 = xno; then
  WINDOWING_SYSTEM=""
if test -d "/etc/X11" ; then
	WINDOWING_SYSTEM="-DXWIN"
fi
if test -d "/usr/X11" ; then
	WINDOWING_SYSTEM="-DXWIN"
fi
else
  WINDOWING_SYSTEM="-DWIN32"
fi

if test "$WINDOWING_SYSTEM" = "-DXWIN"; then
	echo "Smells like X11"
	EXE_TARGET="exult"
	SYSLIBS=""
	ICON_FILE=""
else
	echo "Umm. Doesn't seem to be X11."
	echo "Let's assume it's Windows as an alternative."
	WINDOWING_SYSTEM="-DWIN32"
	EXE_TARGET="exult.exe"
	disable_kmid="yes"
	SYSLIBS="-lwinmm"
	ICON_FILE="exultico.o"
fi

dnl this is for win32 for now at least
AC_ARG_ENABLE(usecode-debugger, [  --enable-usecode-debugger          pre-alpha usecode debugger [default no]],,enable_usecode_debugger=no)
if test x$enable_usecode_debugger = xyes; then
	echo "Enabling usecode debugger"
	CXXFLAGS="$CXXFLAGS -DUSECODE_DEBUGGER=1"
fi

dnl Just for record-keeping
AC_DEFINE(AUTOCONFIGURED)

AC_MSG_CHECKING(for a timidity binary)
AC_CHECK_PROG(HAVE_TIMIDITY_BIN, timidity, yes, no)
if test "$HAVE_TIMIDITY_BIN" = "yes"; then
	AC_MSG_RESULT(Found a binary. We'll build a driver for it)
	AC_DEFINE(HAVE_TIMIDITY_BIN)
fi

AC_MSG_CHECKING(the SDL installation)
AC_CHECK_PROG(HAVE_SDL_CONFIG, sdl-config, yes, no)

if test "$HAVE_SDL_CONFIG" != "yes"; then
        echo "You must have SDL installed."
        exit 1
fi
SDL_INCLUDES=`sdl-config --cflags`
SDL_LIBS=`sdl-config --libs`
AC_DEFINE(HAVE_SDL)
AC_MSG_RESULT(Now we know lots about how SDL is installed locally)


dnl this is for kmid
AC_MSG_CHECKING(whether to disable kmid)
if test x$disable_kmid = xno; then
	AC_MSG_RESULT(no)
	AC_MSG_CHECKING(for libkmid)

	KMID_INCLUDES=""
	KMID_LIBS=""
	for i in /usr/include/libkmid.h /usr/include/libkmid/libkmid.h /usr/local/include/libkmid.h /usr/local/include/libkmid/libkmid.h; do
		test -f "$i" && KMID_INCLUDES=`dirname $i` && HAVE_KMID="yes"
	done
	for i in /lib /usr/lib /usr/local/lib; do
		test -f "$i/libkmid.so" && KMID_LIBS="-L$i -lkmid"
	done
	if test "$HAVE_KMID" != "yes" ; then
		AC_MSG_RESULT(no)
		echo "Disabling kmid after all..."	
	else
		AC_MSG_RESULT(Found it. Neat.)
		AC_DEFINE(HAVE_LIBKMIDI)
		KMID_INCLUDES="-I$KMID_INCLUDES"
	fi
else
	AC_MSG_RESULT(yes)
	echo "Okay. No Kmid in this binary."
fi

AC_SUBST(DEBUG_FLAGS)

AC_MSG_CHECKING(for a C++-Compiler)
dnl if there is one, print out. if not, don't matter
AC_MSG_RESULT($CXX)
 
if test -z "$CXX"; then
	AC_CHECK_PROG(CXX, g++, g++)
	CXXFLAGS="$CXXFLAGS --pedantic"
	PEDANTIC="--pedantic"
fi
if test -z "$CXX"; then AC_CHECK_PROG(CXX, CC, CC) fi
if test -z "$CXX"; then AC_CHECK_PROG(CXX, xlC, xlC) fi
if test -z "$CXX"; then AC_CHECK_PROG(CXX, DCC, DCC) fi
test -z "$CXX" && AC_MSG_ERROR([no acceptable C++-compiler found in \$PATH])

AC_PROG_CXX_WORKS
AC_PROG_CXX_GNU

AM_DISABLE_SHARED
AM_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)
AC_SUBST(SDL_INCLUDES)
AC_SUBST(SDL_LIBS)
AC_SUBST(WINDOWING_SYSTEM)
AC_SUBST(RELNUM)
AC_SUBST(KMID_INCLUDES)
AC_SUBST(KMID_LIBS)
AC_SUBST(PEDANTIC)
AC_SUBST(HAVE_TIMIDITY_BIN)
AC_SUBST(EXE_TARGET)
AC_SUBST(SYSLIBS)
AC_SUBST(ICON_FILE)
AC_SUBST(CPPFLAGS)

if test x$x_libraries = xNONE; then
	echo "No special X library path"
	unset x_libraries
else
	x_libraries="-L$x_libraries -lX11 -lXext"
	AC_SUBST(x_libraries)
fi

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(limits.h sys/time.h unistd.h)


dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_CHECK_BOOL


dnl For the alternate allocator
AC_ARG_ENABLE(alternate_allocator, [  --enable-alternate-allocator          enable alternate memory allocator [default no]],,alternate_allocator=no)
AC_MSG_CHECKING(checking allocation scheme)
if test x$enable_alternate_allocator = xyes; then
  AC_DEFINE(WANT_ALTERNATE_ALLOCATOR)
  AC_MSG_RESULT(alternate)
else
  AC_MSG_RESULT(normal)
fi


dnl For storage initialisation
AC_ARG_ENABLE(storage_initialisation, [  --enable-storage-initialisation          clear storage when allocated [default no]],,storage_initialisation=no)
if test x$enable_storage_initialisation = xyes; then
  AC_DEFINE(WANT_ALTERNATE_ALLOCATOR)
  AC_DEFINE(INITIALISE_ALLOCATED_BLOCKS,0)
fi

dnl For storage poisoning
AC_ARG_ENABLE(storage_poisoning, [  --enable-storage-poisoning          fill storage with 0xf1 when allocated [default no]],,storage_initialisation=no)
if test x$enable_storage_initialisation = xyes; then
  if test x$enable_storage_poisoning = xyes; then
	echo "Disabling storage initialisation. Can poision or init to zero. Not both"
  fi
  AC_DEFINE(WANT_ALTERNATE_ALLOCATOR)
  AC_DEFINE(POISON_ALLOCATED_BLOCKS)
fi

dnl this is for debug
DEBUG_FLAGS="-O2"
AC_ARG_ENABLE(debug, [  --enable-debug          enable debug messages [default no]],,enable_debug=no)
AC_MSG_CHECKING(whether to enable debug)
if test x$enable_debug = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(DEBUG)
  DEBUG_FLAGS="-g"
else
  AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(debug, [  --enable-optimized-debug          enable optimized debug build [default no]],,enable_opt_debug=no)
AC_MSG_CHECKING(whether to enable optimized debug build)
if test x$enable_opt_debug = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(DEBUG)
  DEBUG_FLAGS="-g -O2 -fno-default-inline -fno-inline"
else
  AC_MSG_RESULT(no)
fi




dnl more warnings
AC_ARG_ENABLE(warnings, [  --enable-warnings       enable all warnings and debug msg [default no]],,enable_warnings=no)
AC_MSG_CHECKING(whether to enable all warnings)
if test x$enable_warnings = xyes; then
  AC_MSG_RESULT(yes)
  DEBUG_FLAGS="$DEBUG_FLAGS -Wall -O -Wunused -Wuninitialized -Woverloaded-virtual -Wpointer-arith -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Winline"
else
  AC_MSG_RESULT(no)
fi

AC_SUBST(DEBUG_FLAGS)

AC_MSG_CHECKING(for mkstemp())
AC_TRY_COMPILE([
#if HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <stdlib.h>
],
[
	mkstemp(0);
],
  ac_cv_func_mkstemp=yes,
  ac_cv_func_mkstemp=no)
AC_MSG_RESULT($ac_cv_func_mkstemp)
if test x$ac_cv_func_mkstemp = xyes ; then
  AC_DEFINE(HAVE_MKSTEMP)
fi



dnl Weep into your beer warnings
AC_ARG_ENABLE(awful-warnings, [  --enable-awful-warnings       enable warnings for violations of Scott Meyers Effective C++ style guidelines [default no]],,enable_awful_warnings=no)
AC_MSG_CHECKING(whether to enable awful warnings)
if test x$enable_awful_warnings = xyes; then
  AC_MSG_RESULT(yes)
  DEBUG_FLAGS="$DEBUG_FLAGS -Weffc++"
else
  AC_MSG_RESULT(no)
fi

dnl Heavy namespaces. Most installations probably can't take this option
AC_ARG_ENABLE(std-namespace, [  --enable-std-namespace		Tell the compiler to honour the std namespace. May not work for you. [default no]],,enable_std_namespace=no)
AC_MSG_CHECKING(if we should honour the std namespace)
if test x$enable_std_namespace = xyes; then
  AC_MSG_RESULT(yes)
  DEBUG_FLAGS="$DEBUG_FLAGS -fhonor-std"
else
  AC_MSG_RESULT(no)
fi

dnl Ignore long-long warnings (for SDL & winnt header files...)
if test "$WINDOWING_SYSTEM" = "-DWIN32"; then
  DEBUG_FLAGS="$DEBUG_FLAGS -Wno-long-long"
fi

dnl 
AC_C_INLINE
if test x$CC = xgcc; then
   CFLAGS="$CFLAGS -Wall"
fi


dnl AC_ARG_ENABLE(gtk-interface, [  --enable-gtk-interface          build the GTK+ interface [default no]],build_gtk_interface=yes,build_gtk_interface=no)
dnl if test x$build_gtk_interface = xyes; then
dnl	AC_PATH_PROG(GTKCONFIG, gtk-config)
dnl	AM_CONDITIONAL(GTK_INTERFACE, true)
dnl	AC_SUBST(GTK_INTERFACE)
dnl fi

AC_PATH_PROG(GNOMECONFIG, gnome-config)
AM_CONDITIONAL(GNOME_INSTALLED, false)
if test -n "$GNOMECONFIG"; then
	AM_CONDITIONAL(GNOME_INSTALLED, true)
	GNOMEDATADIR=`gnome-config --datadir`
	AC_SUBST(GNOMEDATADIR)
fi


AM_CONDITIONAL(HAVE_GIMP, false)
AC_ARG_ENABLE(gimp-plugin, [  --disable-gimp-plugin          do not build the GIMP plugin [default no]],,disable_gimp_plugin=no)
dnl Check for GIMP devel stuff. We need to check for glib first
if test x$disable_gimp_plugin = xno; then
	AC_PATH_PROG(GLIBCONFIG, glib-config)
	if test -n "$GLIBCONFIG"; then
		GLIB_INCLUDES=`glib-config --cflags`
		save_cppflags="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS $GLIB_INCLUDES"
		AC_CHECK_HEADER(libgimp/gimp.h,GIMP_H=true)
		if test -n "$GIMP_H"; then
			AC_MSG_CHECKING(for GIMP version)
			gimp_version=`gimptool --version |  awk 'BEGIN { FS = "."; } { print $1 * 1000 + $2*100+$3;}'`
			if test "$gimp_version" -ge 1126; then
				AC_MSG_RESULT(found >= 1.1.26)
				AM_CONDITIONAL(HAVE_GIMP, true)
				CPPFLAGS="$save_cppflags"
				GIMP_PLUGIN_PREFIX=`gimptool --gimpplugindir`
				AC_SUBST(GIMP_PLUGIN_PREFIX)
			else
				AC_MSG_RESULT(found < 1.1.26 - disabling plugin)
			fi
		fi
	fi
fi

AC_OUTPUT(exult.spec \
Makefile \
audio/Makefile \
audio/midi_drivers/Makefile \
conf/Makefile \
files/Makefile \
pathfinder/Makefile \
flic/Makefile \
tools/Makefile \
data/Makefile \
docs/Makefile \
desktop/Makefile )
