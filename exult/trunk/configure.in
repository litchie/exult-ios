dnl Process this file with autoconf to produce a configure script.
AC_INIT(exult.cc)


dnl ----------------------
dnl System/version info
dnl ----------------------

PACKAGE=exult
MAJOR=0
RELNUM=99.0
VERSION=$MAJOR.$RELNUM

dnl check host/build systems. For now, only host is used
dnl (build = system we're building on, host = system we're building for)
AC_CANONICAL_HOST
AC_CANONICAL_BUILD

AM_INIT_AUTOMAKE($PACKAGE,$VERSION,no-define)
AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")

AM_CONFIG_HEADER(autoconfig.h)


dnl -------------------------
dnl Host system settings
dnl -------------------------

dnl determine windowing system from 'host'
AC_MSG_CHECKING("windowing system")
case "$host_os" in
	linux*)
		WINDOWING_SYSTEM="-DXWIN"
		AC_MSG_RESULT(X11)
		;;
	beos)
		WINDOWING_SYSTEM="-DBEOS"
		AC_MSG_RESULT(BeOS)
		;;
	mingw32* | cygwin )
		WINDOWING_SYSTEM="-DWIN32"
		AC_MSG_RESULT(Win32)
		;;
	*)
		WINDOWING_SYSTEM="-DXWIN"
		AC_MSG_RESULT(not sure... guessing X11)
		;;
esac

SYSLIBS=""
ICON_FILE=""

case $WINDOWING_SYSTEM in
	-DXWIN)
		EXE_TARGET="exult"
		;;
	-DWIN32)
		EXE_TARGET="exult.exe"
		SYSLIBS="-lwinmm"
		ICON_FILE="exultico.o"
		enable_kmid="no"
		enable_timidity="no"
		;;
	-DBEOS)
		EXE_TARGET="exult"
		SYSLIBS="-lbe -lmidi"
		enable_kmid="no"
		enable_timidity="no"
		;;
esac

dnl Check sizes of integer types.
dnl Cross-compiling sizes set to 2,4,4,8. (May need to be changed...)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(long long, 8)

dnl ----------------------------
dnl Compilers and other tools
dnl ----------------------------

AC_PROG_CC
AC_REQUIRE([AC_PROG_CPP])
AC_PROG_CPP
AC_PROG_INSTALL
AM_PROG_LEX
AC_PROG_YACC
AM_CONDITIONAL(LEXYACC, test -n "$YACC")

AC_ARG_WITH(cxx, [  --with-cxx=COMMAND	  Explicitly specify the C++ compiler to use], CXX="$withval")

if test -z "$CXX"; then
	AC_MSG_CHECKING(for a C++-Compiler)
	dnl if there is one, print out. if not, don't matter
	AC_MSG_RESULT($CXX)
fi

if test -z "$CXX"; then
	AC_CHECK_PROG(CXX, g++, g++)
	CXXFLAGS="$CXXFLAGS --pedantic"
fi
if test -z "$CXX"; then AC_CHECK_PROG(CXX, CC, CC) fi
if test -z "$CXX"; then AC_CHECK_PROG(CXX, xlC, xlC) fi
if test -z "$CXX"; then AC_CHECK_PROG(CXX, DCC, DCC) fi
test -z "$CXX" && AC_MSG_ERROR([no acceptable C++-compiler found in \$PATH])

AC_PROG_CXX_WORKS
dnl Compaq cxx /will/ break on Debian/Linux. We work around this.
if test e"$WEIRD_CXX" = e; then
	AC_PROG_CXX_WORKS
fi

AC_PROG_CXX_GNU

AM_DISABLE_SHARED

AM_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)


dnl --------------------------
dnl Compilation environment
dnl --------------------------

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(limits.h sys/time.h unistd.h)
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(hash_map hash_set)
AC_LANG_C

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM

AC_MSG_CHECKING(for mkstemp())
AC_TRY_COMPILE([
#if HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <stdlib.h>
],
[
	mkstemp(0);
],
  ac_cv_func_mkstemp=yes,
  ac_cv_func_mkstemp=no)
AC_MSG_RESULT($ac_cv_func_mkstemp)
if test x$ac_cv_func_mkstemp = xyes ; then
	AC_DEFINE(HAVE_MKSTEMP)
fi

dnl Check if C compiler supports inline
AC_C_INLINE
if test x$CC = xgcc; then
	CFLAGS="$CFLAGS -Wall"
fi

dnl do we need special X11 libraries?
AC_MSG_CHECKING(for special X11 libraries)
if test x$x_libraries = xNONE; then
	AC_MSG_RESULT(no)
	unset x_libraries
else
	x_libraries="-L$x_libraries -lX11 -lXext"
	AC_MSG_RESULT($x_libraries)
	AC_SUBST(x_libraries)
fi


dnl ------
dnl SDL
dnl ------
dnl This needs improving. Maybe steal it from the configure.in for the
dnl SDL test programs?


AC_CHECK_PROG(HAVE_SDL_CONFIG, sdl-config, found it, not found)

if test "$HAVE_SDL_CONFIG" = "not found"; then
	AC_MSG_ERROR(You must have SDL installed.)
fi
SDL_INCLUDES=`sdl-config --cflags`
SDL_LIBS=`sdl-config --libs`


dnl ----------------------
dnl Optional components
dnl ----------------------

dnl Timidity MIDI driver
AC_MSG_CHECKING(whether to enable timidity)
AC_ARG_ENABLE(timidity, [  --disable-timidity      force exult not to use timidity [defult no]],,enable_timidity=yes)
if test x$enable_timidity = xyes; then
	AC_MSG_RESULT(yes)
	AC_CHECK_PROG(HAVE_TIMIDITY_BIN, timidity, found it, not found)
	if test "$HAVE_TIMIDITY_BIN" = "found it"; then
		AC_DEFINE(HAVE_TIMIDITY_BIN)
	fi
else
	AC_MSG_RESULT(no)
fi

dnl there _should_ be a built-in macro for this check...
dnl kmid MIDI driver
AC_MSG_CHECKING(whether to enable kmid)
AC_ARG_ENABLE(kmid,     [  --disable-kmid          force exult not to use kmid [default no]],,enable_kmid=yes)
if test x$enable_kmid = xyes; then
	AC_MSG_RESULT(yes)
	AC_MSG_CHECKING(for libkmid)

	KMID_INCLUDES=""
	KMID_LIBS=""
	for i in /usr/include/libkmid.h /usr/include/libkmid/libkmid.h /usr/local/include/libkmid.h /usr/local/include/libkmid/libkmid.h; do
		test -f "$i" && KMID_INCLUDES=`dirname $i` && HAVE_KMID="yes"
	done
	for i in /lib /usr/lib /usr/local/lib; do
		test -f "$i/libkmid.so" && KMID_LIBS="-L$i -lkmid"
	done
	if test "$HAVE_KMID" != "yes" ; then
		AC_MSG_RESULT(not found)
	else
		AC_MSG_RESULT(found it)
		AC_DEFINE(HAVE_LIBKMIDI)
		KMID_INCLUDES="-I$KMID_INCLUDES"
	fi
else
	AC_MSG_RESULT(no)
fi


dnl ---------------------------
dnl Memory allocation scheme
dnl ---------------------------

AC_MSG_CHECKING(checking memory allocation scheme)

dnl For the alternate allocator
AC_ARG_ENABLE(alternate-allocator, [  --enable-alternate-allocator          enable alternate memory allocator [default no]],,enable_alternate_allocator=no)
if test x$enable_alternate_allocator = xyes; then
	AC_DEFINE(WANT_ALTERNATE_ALLOCATOR)
fi

dnl For storage initialisation
AC_ARG_ENABLE(storage-initialisation, [  --enable-storage-initialisation          clear storage when allocated [default no]],,enable_storage_initialisation=no)
if test x$enable_storage_initialisation = xyes; then
	AC_DEFINE(WANT_ALTERNATE_ALLOCATOR)
	AC_DEFINE(INITIALISE_ALLOCATED_BLOCKS,0)
fi

dnl For storage poisoning
AC_ARG_ENABLE(storage-poisoning, [  --enable-storage-poisoning          fill storage with 0xf1 when allocated [default no]],,enable_storage_poisoning=no)
if test x$enable_storage_poisoning = xyes; then
	if test x$enable_storage_initialisation = xyes; then
		AC_MSG_RESULT(poisoned. (Disabling storage initialisation. Can't poison and init to zero.))
	fi
	AC_DEFINE(WANT_ALTERNATE_ALLOCATOR)
	AC_DEFINE(POISON_ALLOCATED_BLOCKS)
fi

dnl output result
if test x$enable_storage_poisoning = xyes; then
	if test x$enable_storage_initialisation = xno; then
		AC_MSG_RESULT(poisoned)
	fi
else
	if test x$enable_storage_initialisation = xyes; then
		AC_MSG_RESULT(initialized)
	else
		if test x$enable_alternate_allocator = xyes; then
			AC_MSG_RESULT(alternate)
		else
			AC_MSG_RESULT(normal)
		fi
	  fi
fi


dnl --------------------
dnl Debugging options
dnl --------------------

dnl basic debugging mode
AC_ARG_ENABLE(debug, [  --enable-debug          enable debug messages [default no]],,enable_debug=no)
AC_MSG_CHECKING(whether to enable debugging mode)
if test x$enable_debug = xyes; then
	AC_MSG_RESULT(yes)
	AC_DEFINE(DEBUG)
	DEBUG_FLAGS="-g"
else
	AC_MSG_RESULT(no)
	DEBUG_FLAGS="-O2"
fi

dnl optimized debugging mode
AC_ARG_ENABLE(optimized-debug, [  --enable-optimized-debug          enable optimized debug build [default no]],,enable_optimized_debug=no)
AC_MSG_CHECKING(whether to do an optimized debug build)
if test x$enable_optimized_debug = xyes; then
	AC_MSG_RESULT(yes)
	AC_DEFINE(DEBUG)
	DEBUG_FLAGS="-g -O2 -fno-default-inline -fno-inline"
else
	AC_MSG_RESULT(no)
fi

dnl SDL parachute?
AC_ARG_ENABLE(sdl-parachute,       [ --disable-sdl-parachute                disables SDL parachute [default no]],,enable_sdl_parachute=yes)
AC_MSG_CHECKING(if we should disable the SDL parachute)
if test x$enable_sdl_parachute = xno; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(NO_SDL_PARACHUTE)
else
  AC_MSG_RESULT(no)
fi

dnl Usecode debugger
AC_ARG_ENABLE(usecode-debugger, [  --enable-usecode-debugger          pre-alpha usecode debugger [default no]],,enable_usecode_debugger=no)
AC_MSG_CHECKING(whether to enable the usecode debugger)
if test x$enable_usecode_debugger = xyes; then
	AC_MSG_RESULT(yes)
	CXXFLAGS="$CXXFLAGS -DUSECODE_DEBUGGER=1"
else
	AC_MSG_RESULT(no)
fi


dnl ----------------
dnl Warning level
dnl ----------------

dnl determine warning level
AC_MSG_CHECKING(warning level)
WARNING_LEVEL="normal"

dnl more warnings
AC_ARG_ENABLE(warnings, [  --enable-warnings       enable all warnings and debug msg [default no]],,enable_warnings=no)
if test x$enable_warnings = xyes; then
 	DEBUG_FLAGS="$DEBUG_FLAGS -Wall -O -Wunused -Wuninitialized -Woverloaded-virtual -Wpointer-arith -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Winline"
	WARNING_LEVEL="all"
fi

dnl Weep into your beer warnings
AC_ARG_ENABLE(awful-warnings, [  --enable-awful-warnings       enable warnings for violations of Scott Meyers' Effective C++ style guidelines [default no]],,enable_awful_warnings=no)
if test x$enable_awful_warnings = xyes; then
	DEBUG_FLAGS="$DEBUG_FLAGS -Weffc++"
	if test x$WARNING_LEVEL = xall; then
		WARNING_LEVEL="all, including Scott Meyers' 'effective C++'"
	else
		WARNING_LEVEL="Scott Meyers' 'effective C++'"
	fi
fi

dnl Output result
AC_MSG_RESULT($WARNING_LEVEL)


dnl Ignore long-long warnings (for SDL header files...)
AC_ARG_ENABLE(long-long-warnings, [  --enable-long-long-warnings   Enable long long warnings- needed for Compaq's cxx with GNU ld],
	,,enable_long_long_warnings=no)
AC_MSG_CHECKING(if we should disable long-long warnings)
if test x$enable_long_long_warnings = xyes; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)
	DEBUG_FLAGS="$DEBUG_FLAGS -Wno-long-long"
fi

dnl Heavy namespaces. Most installations probably can't take this option
AC_ARG_ENABLE(std-namespace, [  --enable-std-namespace		Tell the compiler to honour the std namespace. May not work for you. [default no]],,enable_std_namespace=no)
AC_MSG_CHECKING(if we should honour the std namespace)
if test x$enable_std_namespace = xyes; then
	AC_MSG_RESULT(yes)
	DEBUG_FLAGS="$DEBUG_FLAGS -fhonor-std"
else
	AC_MSG_RESULT(no)
fi


dnl --------------------
dnl External features
dnl --------------------

dnl Build any external programs?
AC_ARG_ENABLE(tools, [ --disable-tools                   only build the main program [default no]],,enable_tools=yes)
AC_MSG_CHECKING(whether to build only the main program)
if test x$enable_tools = xno; then
	AC_MSG_RESULT(yes)
	AM_CONDITIONAL(BUILD_TOOLS, false)
	enable_gtk_interface=no
	enable_gimp_plugin=no
	enable_data=no
else
	AM_CONDITIONAL(BUILD_TOOLS, true)
	AC_MSG_RESULT(no)
fi

dnl Build data files?
AC_ARG_ENABLE(data, [ --disable-data                    don't build the data files [default no]],,enable_data=yes)
AC_MSG_CHECKING(whether to build the data files)
if test x$enable_data = xno; then
	AC_MSG_RESULT(no)
	AM_CONDITIONAL(DATA_FILES, false)
else
	AM_CONDITIONAL(DATA_FILES, true)
	AC_MSG_RESULT(yes)
fi

dnl GTK interface
AC_ARG_ENABLE(gtk-interface, [  --enable-gtk-interface          build the GTK+ interface [default no]],,enable_gtk_interface=no)
AC_MSG_CHECKING(whether to build the GTK+ interface)
if test x$enable_gtk_interface = xyes; then
	AC_MSG_RESULT(yes)
	AC_PATH_PROG(GTKCONFIG, gtk-config)
	AM_CONDITIONAL(HAVE_GTK, true)
	GTK_INCLUDES=`gtk-config --cflags`
	GTK_LIBS=`gtk-config --libs`
	AC_SUBST(GTK_INCLUDES)
	AC_SUBST(GTK_LIBS)
	AC_PATH_PROG(GLADECONFIG, libglade-config)
	if test -n "$GLADECONFIG"; then
		AM_CONDITIONAL(HAVE_GLADE, true)
		LIBGLADE_LIBS=`libglade-config --libs`
		AC_SUBST(LIBGLADE_LIBS)
	fi
else
	AM_CONDITIONAL(HAVE_GTK, false)
	AC_MSG_RESULT(no)
fi

dnl GNOME desktop files
AC_PATH_PROG(GNOMECONFIG, gnome-config)
if test -n "$GNOMECONFIG"; then
	AM_CONDITIONAL(GNOME_INSTALLED, true)
	GNOMEDATADIR=`gnome-config --datadir`
	AC_SUBST(GNOMEDATADIR)
else
	AM_CONDITIONAL(GNOME_INSTALLED, false)
fi

dnl GIMP plugin
AM_CONDITIONAL(GIMP_PLUGIN, false)
AC_ARG_ENABLE(gimp-plugin, [  --disable-gimp-plugin          do not build the GIMP plugin [default no]],,enable_gimp_plugin=yes)
dnl Check for GIMP devel stuff. We need to check for glib first
if test x$enable_gimp_plugin = xyes; then
	AC_PATH_PROG(GLIBCONFIG, glib-config)
	if test -n "$GLIBCONFIG"; then
		GLIB_INCLUDES=`glib-config --cflags`
		save_cppflags="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS $GLIB_INCLUDES"
		AC_CHECK_HEADER(libgimp/gimp.h,GIMP_H=true)
		if test -n "$GIMP_H"; then
			AC_MSG_CHECKING(for GIMP version)
			gimp_version=`gimptool --version |  awk 'BEGIN { FS = "."; } { print $1 * 1000 + $2*100+$3;}'`
			if test "$gimp_version" -ge 1126; then
				AC_MSG_RESULT(found >= 1.1.26)
				AM_CONDITIONAL(GIMP_PLUGIN, true)
				CPPFLAGS="$save_cppflags"
				GIMP_PLUGIN_PREFIX=`gimptool --gimpplugindir`
				AC_SUBST(GIMP_PLUGIN_PREFIX)
				AC_DEFINE(HAVE_GIMP)
				GIMP_INCLUDES=`gimptool --cflags`
				GIMP_LIBS=`gimptool --libs`
				AC_SUBST(GIMP_INCLUDES)
				AC_SUBST(GIMP_LIBS)
			else
				AC_MSG_RESULT(found < 1.1.26 - disabling plugin)
			fi
		fi
	fi
fi


dnl ------------------
dnl Generate output
dnl ------------------

AC_SUBST(SDL_INCLUDES)
AC_SUBST(SDL_LIBS)
AC_SUBST(WINDOWING_SYSTEM)
AC_SUBST(KMID_INCLUDES)
AC_SUBST(KMID_LIBS)
AC_SUBST(EXE_TARGET)
AC_SUBST(SYSLIBS)
AC_SUBST(ICON_FILE)
AC_SUBST(DEBUG_FLAGS)

AC_OUTPUT([
exult.spec
Makefile
audio/Makefile
audio/midi_drivers/Makefile
conf/Makefile
files/Makefile
gumps/Makefile
pathfinder/Makefile
flic/Makefile
tools/Makefile
data/Makefile
docs/Makefile
desktop/Makefile
objs/Makefile
imagewin/Makefile
shapes/Makefile
usecode/Makefile
usecode/compiler/Makefile
usecode/ucxt/Makefile
usecode/ucxt/src/Makefile
mapedit/Makefile
])

